{"name":"Services","tagline":"A nifty service layer for your Rails app","body":"# Services\r\n\r\n[![Gem Version](https://badge.fury.io/rb/services.png)](http://badge.fury.io/rb/services)\r\n[![Build Status](https://secure.travis-ci.org/krautcomputing/services.png)](http://travis-ci.org/krautcomputing/services)\r\n[![Dependency Status](https://gemnasium.com/krautcomputing/services.png)](https://gemnasium.com/krautcomputing/services)\r\n[![Code Climate](https://codeclimate.com/github/krautcomputing/services.png)](https://codeclimate.com/github/krautcomputing/services)\r\n\r\nServices is a collection of modules and base classes that let you simply add a service layer to your Rails app.\r\n\r\n## Motivation\r\n\r\nA lot has been written about service layers (service objects, SOA, etc.) for Rails. There are of course advantages and disadvantages, but after using Services since 2013 in several Rails apps, I must say that in my opinion the advantages far outweigh the disadvantages.\r\n\r\n**The biggest benefit you get when using a service layer, in my opinion, is that it gets so much easier to reason about your application, find a bug, or implement new features, when all your business logic is in services, not scattered in models, controllers, helpers etc.**\r\n\r\n## Usage\r\n\r\nFor disambiguation: in this README, when you read \"Services\" with a uppercase \"S\", this gem is meant, whereas with \"services\", well, the plural of service is meant.\r\n\r\n### Requirements\r\n\r\n#### Ruby >= 2.0\r\n\r\n#### Rails >= 3.2\r\n\r\n#### Redis >= 2.8\r\n\r\nRedis is used at several points, e.g. to store information about the currently running services, so you can enforce uniqueness for specific services, i.e. make sure no more than one instance of such a service is executed simultaneously.\r\n\r\n#### Postgres (optional)\r\n\r\nThe SQL that `Services::Query` (discussed further down) generates is optimized for Postgres. It might work with other databases but it's not guaranteed. If you're not using Postgres, you can still use all other parts of Services, just don't use `Services::Query` or, even better, submit a [pull request](https://github.com/krautcomputing/services/issues) that fixes it to work with your database!\r\n\r\n#### Sidekiq (optional)\r\n\r\nTo process services in the background, Services uses [Sidekiq](https://github.com/mperham/sidekiq). If you don't need background processing, you can still use Services without Sidekiq. When you then try to enqueue a service for background processing, an exception will be raised. If you use Sidekiq, make sure to load the Services gem after the Sidekiq gem.\r\n\r\n### Basic principles\r\n\r\nServices is based on a couple of basic principles around what a service should be and do in your app:\r\n\r\nA service...\r\n\r\n* does only one thing and does it well (Unix philosophy)\r\n* can be run synchronously (i.e. blocking/in the foreground) or asynchronously (i.e. non-blocking/in the background)\r\n* can be configured as \"unique\", meaning only one instance of it should be run at any time (including or ignoring parameters)\r\n* logs all the things (start time, end time, duration, caller, exceptions etc.)\r\n* has its own exception class(es) which all exceptions that might be raised inherit from\r\n* does not care whether certain parameters are objects or object IDs\r\n\r\nApart from these basic principles, you are free to implement the actual logic in a service any way you want.\r\n\r\n### Conventions\r\n\r\nFollow these conventions when using Services in your Rails app, and you'll be fine:\r\n\r\n* Let your services inherit from `Services::Base`\r\n* Let your query objects inherit from `Services::Query`\r\n* Put your services in `app/services/`\r\n* Namespace your services with the model they operate on and give them \"verb names\", e.g. `app/services/users/delete.rb` defines `Services::Users::Delete`. If a service operates on multiple models or no models at all, don't namespace them (`Services::DoStuff`) or namespace them by logical groups unrelated to models (`Services::Maintenance::CleanOldStuff`, `Services::Maintenance::SendDailySummary`, etc.)\r\n* Some services call other services. Try to not combine multiple calls to other services and business logic in one service. Instead, some services should contain only business logic and other services only a bunch of service calls but no (or little) business logic. This keeps your services nice and modular.\r\n\r\n### Configuration\r\n\r\nYou can/should configure Services in an initializer:\r\n\r\n```ruby\r\n# config/initializers/services.rb\r\nServices.configure do |config|\r\n  config.logger = Services::Logger::Redis.new(Redis.new)    # see Logging\r\n  config.redis  = Redis.new                                 # actually you should use a Redis connection pool\r\nend\r\n```\r\n\r\n### Rails autoload fix\r\n\r\nBy default, Rails expects `app/services/users/delete.rb` to define `Users::Delete`, but we want it to expect `Services::Users::Delete`. To make this work, add the `app` folder to the autoload path:\r\n\r\n```ruby\r\n# config/application.rb\r\nconfig.autoload_paths += [config.root.join('app')]\r\n```\r\n\r\nThis looks as if it might break things, but I've never had any problems with it.\r\n\r\n### Services::Base\r\n\r\n`Services::Base` is the base class you should use for all your services. It gives you a couply of helper methods and defines a custom exception class for you.\r\n\r\nRead [the source](lib/services/base.rb) to understand what it does in more detail.\r\n\r\nThe following example service takes one or more users or user IDs as an argument and deletes the users:\r\n\r\n```ruby\r\nmodule Services\r\n  module Users\r\n    class Delete < Services::Base\r\n      def call(ids_or_objects)\r\n        users = find_objects(ids_or_objects)\r\n        users.each do |user|\r\n          if user.posts.any?\r\n            raise Error, \"User #{user.id} has one or more posts, refusing to delete.\"\r\n          end\r\n          user.destroy\r\n          Mailer.user_deleted(user).deliver\r\n        end\r\n        users\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThis service can be called in several ways:\r\n\r\n```ruby\r\n# Execute synchronously/in the foreground\r\n\r\nServices::Users::Delete.call User.find(1)                # with a user object\r\nServices::Users::Delete.call User.where(id: [1, 2, 3])   # with a ActiveRecord::Relation returning user objects\r\nServices::Users::Delete.call [user1, user2, user3]       # with an array of user objects\r\nServices::Users::Delete.call 1                           # with a user ID\r\nServices::Users::Delete.call [1, 2, 3]                   # with an array of user IDs\r\n\r\n# Execute asynchronously/in the background\r\n\r\nServices::Users::Delete.perform_async 1                  # with a user ID\r\nServices::Users::Delete.perform_async [1, 2, 3]          # with multiple user IDs\r\n```\r\n\r\nAs you can see, you cannot use objects or a ActiveRecord::Relation as parameters when calling a service asynchronously since the arguments are serialized to Redis. This might change once Services works with [ActiveJob](https://github.com/rails/rails/tree/master/activejob) and [GlobalID](https://github.com/rails/globalid/).\r\n\r\nThe helper `find_objects` is used to allow the `ids_or_objects` parameter to be a object, object ID, array or ActiveRecord::Relation, and make sure you we dealing with an array of objects from that point on.\r\n\r\nIt's good practice to always return the objects a service has been operating on at the end of the service.\r\n\r\n### Services::Query\r\n\r\n`Services::Query` on the other hand should be the base class for all query objects.\r\n\r\nHere is an example that is used to find users:\r\n\r\n```ruby\r\nmodule Services\r\n  module Users\r\n    class Find < Services::Query\r\n      convert_condition_objects_to_ids :post\r\n\r\n      private def process(scope, conditions)\r\n        conditions.each do |k, v|\r\n          case k\r\n          when :email, :name\r\n            scope = scope.where(k => v)\r\n          when :post_id\r\n            scope = scope.joins(:posts).where(\"#{Post.table_name}.id\" => v)\r\n          else\r\n            raise ArgumentError, \"Unexpected condition: #{k}\"\r\n          end\r\n        end\r\n        scope\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nA query object that inherits from `Services::Query` always receives two parameters: an array of IDs and a hash of conditions. It always returns an array, even if none or only one object is found.\r\n\r\nWhen you write your query objects, the only method you have to write is `process` (preferably make it private). This method does the actual querying for all non-standard parameters (more about standard vs. non-standard parameters below).\r\n\r\nThis is how `Services::Users::Find` can be called:\r\n\r\n```ruby\r\nServices::Users::Find.call []                             # find all users, neither filtered by IDs nor by conditions\r\nServices::Users::Find.call [1, 2, 3]                      # find users with ID 1, 2 or 3\r\nServices::Users::Find.call 1                              # find users with ID 1 (careful: returns an array containing this one user, if found, otherwise an empty array)\r\nServices::Users::Find.call [], email: 'foo@bar.com'       # find users with this email address\r\nServices::Users::Find.call [1, 2], post: Post.find(1)     # find users with ID 1 or 2 and having the post with ID 1\r\nServices::Users::Find.call [1, 2], post: [Post.find(1)]   # same as above\r\nServices::Users::Find.call [1, 2], post: 1                # same as above\r\n```\r\n\r\nCheck out [the source of `Services::Query`](lib/services/query.rb) to understand what it does in more detail.\r\n\r\n#### Standard vs. non-standard parameters\r\n\r\nto be described...\r\n\r\n#### convert_condition_objects_to_ids\r\n\r\nAs with service objects, you want to be able to pass objects or IDs as conditions to query objects as well, and be sure that they behave the same way. This is what `convert_condition_objects_to_ids :post` does in the previous example: it tells the service object to convert the `post` condition, if present, to `post_id`.\r\n\r\nFor example, at some point in your app you have an array of posts and need to find the users that created these posts. `Services::Users::Find.call([], post: posts)` will find them for you. If you have a post ID on the other hand, simply use `Services::Users::Find.call([], post: post_id)`, or if you have a single post, use `Services::Users::Find.call([], post: post)`. Each of these calls will return an array of users, as you would expect.\r\n\r\n`Services::Query` takes an array of IDs and a hash of conditions as parameters. It then extracts some special conditions (:order, :limit, :page, :per_page) that are handled separately and passes a `ActiveRecord::Relation` and the remaining conditions to the `process` method that the inheriting class must define. This method should handle all the conditions, extend the scope and return it.\r\n\r\n### Helpers\r\n\r\nYour services inherit from `Services::Base` which makes several helper methods available to them:\r\n\r\n* `Rails.application.routes.url_helpers` is included so you use all Rails URL helpers.\r\n* `find_objects` and `find_object` let you automatically find object or a single object from an array of objects or object IDs, or a single object or object ID. The only difference is that `find_object` returns a single object whereas `find_objects` always returns an array.\r\n* `object_class` tries to figure out the class the service operates on. If you follow the service naming conventions and you have a service `Services::Products::Find`, `object_class` will return `Product`. Don't call it if you have a service like `Services::DoStuff` or it will raise an exception.\r\n\r\nYour services also automatically get a custom `Error` class, so you can `raise Error, 'Uh-oh, something has gone wrong!'` in `Services::MyService` and a `Services::MyService::Error` will be raised.\r\n\r\n### Logging\r\n\r\nYou can choose between logging to Redis or to a file, or turn logging off. By default logging is turned off.\r\n\r\n#### Redis\r\n\r\nto be described...\r\n\r\n#### File\r\n\r\nto be described...\r\n\r\n### Exception wrapping\r\n\r\nto be described...\r\n\r\n### Uniqueness checking\r\n\r\nto be described...\r\n\r\n### Background/asynchronous processing\r\n\r\nto be described...\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'services'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install services\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Testing\r\n\r\nYou need Redis to run tests, check out the [Guardfile](Guardfile) which loads it automatically when you start Guard!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}